{
	"compiler": {
		"version": "0.7.5+commit.eb77ed08"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_OHM",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_sOHM",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_epochLength",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_firstEpochNumber",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_firstEpochBlock",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipPulled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipPushed",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "OHM",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "claim",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "contractBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "distributor",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "epoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "number",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "distribute",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "forfeit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "giveLockBonus",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "index",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "locker",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "policy",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pullManagement",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner_",
						"type": "address"
					}
				],
				"name": "pushManagement",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rebase",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceManagement",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "returnLockBonus",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sOHM",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum OlympusStaking.DEPENDENCIES",
						"name": "_dependency_",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "setContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_warmupPeriod",
						"type": "uint256"
					}
				],
				"name": "setWarmup",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "stake",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "toggleDepositLock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalBonus",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "_trigger",
						"type": "bool"
					}
				],
				"name": "unstake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "warmupContract",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "warmupInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "deposit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gons",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expiry",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "lock",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "warmupPeriod",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"claim(address)": {
					"params": {
						"_recipient": "address"
					}
				},
				"contractBalance()": {
					"returns": {
						"_0": "uint"
					}
				},
				"giveLockBonus(uint256)": {
					"params": {
						"_amount": "uint"
					}
				},
				"index()": {
					"returns": {
						"_0": "uint"
					}
				},
				"returnLockBonus(uint256)": {
					"params": {
						"_amount": "uint"
					}
				},
				"setContract(uint8,address)": {
					"params": {
						"_dependency_": "address"
					}
				},
				"setWarmup(uint256)": {
					"params": {
						"_warmupPeriod": "uint"
					}
				},
				"stake(uint256,address)": {
					"params": {
						"_amount": "uint"
					},
					"returns": {
						"_0": "bool"
					}
				},
				"unstake(uint256,bool)": {
					"params": {
						"_amount": "uint",
						"_trigger": "bool"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"claim(address)": {
					"notice": "retrieve sOHM from warmup"
				},
				"contractBalance()": {
					"notice": "returns contract OHM holdings, including bonuses provided"
				},
				"forfeit()": {
					"notice": "forfeit sOHM in warmup and retrieve OHM"
				},
				"giveLockBonus(uint256)": {
					"notice": "provide bonus to locked staking contract"
				},
				"index()": {
					"notice": "returns the sOHM index, which tracks rebase growth"
				},
				"rebase()": {
					"notice": "trigger rebase if epoch over"
				},
				"returnLockBonus(uint256)": {
					"notice": "reclaim bonus from locked staking contract"
				},
				"setContract(uint8,address)": {
					"notice": "sets the contract address for LP staking"
				},
				"setWarmup(uint256)": {
					"notice": "set warmup period for new stakers"
				},
				"stake(uint256,address)": {
					"notice": "stake OHM to enter warmup"
				},
				"toggleDepositLock()": {
					"notice": "prevent new deposits to address (protection from malicious activity)"
				},
				"unstake(uint256,bool)": {
					"notice": "redeem sOHM for OHM"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"smart_contracts/Staking - OlympusStaking/Staking.sol": "OlympusStaking"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"smart_contracts/Staking - OlympusStaking/Address.sol": {
			"keccak256": "0x6d6fa4aa1f02e16366ada8dec2b5f0fd16be321b642d81963d44cc17043bea48",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://159f3648f5e5b8940ccc9e69dd32d0f491faa399d71da02f5750979a5777ec04",
				"dweb:/ipfs/QmUz4B7Veu4mAHcpWkHARJVCxS6Xp5SBairJA284u2kNZu"
			]
		},
		"smart_contracts/Staking - OlympusStaking/IDistributor.sol": {
			"keccak256": "0x76f0d3665e81e96b42160cf256fe2cc48bf25f3b546de9517a64efcfa437e7b2",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://2405543f53c574246ce73bce3f36e5fedb4c90735b0555d84a774a8852ef9bf2",
				"dweb:/ipfs/QmawKeFN1LR4QVoYbwhEsFJGwYbJmkbSRFQ58HTsD6xwit"
			]
		},
		"smart_contracts/Staking - OlympusStaking/IERC20.sol": {
			"keccak256": "0xadd81a449948f7b07ee3d96471d11f545a753380fad6625a9486f9f2c7328860",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://66a8b09ab70ce44028f98e84da7a360d0854b976211ad1818589b3ebcf42bb5b",
				"dweb:/ipfs/QmNM4HxEvvqocVcRb537ojg2iXFmEgrFVcg6XFJZiw9sCZ"
			]
		},
		"smart_contracts/Staking - OlympusStaking/IOwnable.sol": {
			"keccak256": "0x40951fa30cc49c05c5548753fd97a0c884145a815e8ee7775c2882d2a54c6627",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://c86fd97c4dff04187731060fda806d0b54c7d414f6905080944bf41d852b98e6",
				"dweb:/ipfs/QmdWNX23iXSTrezhHfNefLSNWQz1mfbLFqvKNNJ3PMNE5q"
			]
		},
		"smart_contracts/Staking - OlympusStaking/IWarmup.sol": {
			"keccak256": "0x0d2c94f74e71512eed3b4e93f2a76050676cb131bb99b727dcd2a1f47fa52650",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://5cef27c80994513b919b7c6f30545435b790a56367ae38256b904bf0b734152a",
				"dweb:/ipfs/QmfS7K7dNFFRa7hRxKgcmaKSY4Wdvj2TDFEECtwLkeWUns"
			]
		},
		"smart_contracts/Staking - OlympusStaking/IsOHM.sol": {
			"keccak256": "0xffc5af1d25d07e8fdfb38ffeb5a550afa76c082eec902741c0b3fd6efffb7f2f",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://3f24332760a4bf338654725b517598b14b344e677143b4aeb94aeffb47a15fdd",
				"dweb:/ipfs/QmXwXPyQkQsNqFTwxEpETu5PmxpgtC9mMGCZvbwWcTiMxu"
			]
		},
		"smart_contracts/Staking - OlympusStaking/Ownable.sol": {
			"keccak256": "0x9e8c84b43d64b9bf495ff24b47535bf922589f6ae6ddcab9d7006bb7b05a8a81",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://001772317739daa5015496a8a01eba5ce6f9429cca9be65f1c585d3ac5852482",
				"dweb:/ipfs/QmSV15r34DxXvwvmH1tr6VaZev1UsiPrVYvsdN1wwTXYM3"
			]
		},
		"smart_contracts/Staking - OlympusStaking/SafeERC20.sol": {
			"keccak256": "0x026b30810325ff1d06ddd71fb097a9f4633a6ab1bb491662e6f70bad0efaff19",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://8d3942e4f90dce881e555ba9d1b8f96c8b2b2cf783d87ba257a6dee7c1bc3915",
				"dweb:/ipfs/QmUK2zSbXozMLPr6VpARfeSfRu16RPzFHiPmkSN1x3dfB2"
			]
		},
		"smart_contracts/Staking - OlympusStaking/SafeMath.sol": {
			"keccak256": "0x59defb86e464ab485477bdac212ce08c5142f7d4643d7f7fce9d0b674f1dec6c",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://0ef51edfff3d7db2373d11d6310be833aed382052a7972e859434e5dd449a5c2",
				"dweb:/ipfs/QmPxC2Ud688GZTbMf5S1JWqnSaEzjH9Q2gU8WqViUFZYt4"
			]
		},
		"smart_contracts/Staking - OlympusStaking/Staking.sol": {
			"keccak256": "0x89b8a4f66db270cde1e2de2b624cac73bcd42907120ece536e4a4d23c103f52f",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://c3ad0f106446d09d1d78b352d9c9efeb6be8b6101f330c4d6d758df1ed785a72",
				"dweb:/ipfs/QmU66msoGTeA2x5CJxXn7mu9BnWcZCQPTGC8fteduAieQ9"
			]
		}
	},
	"version": 1
}